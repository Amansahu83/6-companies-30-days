/* Submission is here:- https://leetcode.com/problems/largest-divisible-subset/submissions/869879850/*/

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        vector<int>ans;
        sort(nums.begin(),nums.end());
        vector<int>dp(n,1),hash(n);
        int maxi=1;
        int lasti=0;
        for(int i=1;i<n;i++)
        {
            hash[i]=i;
            for(int j=0;j<i;j++)
            {
               if(nums[i]%nums[j]==0 && dp[i]<1+dp[j])
               {
                   dp[i]=1+dp[j];
                   hash[i]=j;
               }
            }
            if(dp[i]>maxi)
            {
                maxi=dp[i];
                lasti=i;
            }
        }
        ans.push_back(nums[lasti]);
        while(hash[lasti]!=lasti)
        {
            lasti=hash[lasti];
            ans.push_back(nums[lasti]);
        }
        return ans;
    }
};
