/*Submission is here https://leetcode.com/problems/course-schedule/submissions/871889291/*/

class Solution {
public:
    bool canFinish(int n, vector<vector<int>>& prerequisites) {
        vector<int>adj[n];
        for(auto i:prerequisites)
        {
            adj[i[0]].push_back(i[1]);
        }
        vector<int>indegree(n,0);
        for(int i=0;i<n;i++)
        {
            for(auto it:adj[i])
            {
               indegree[it]++;
            }
        }
        queue<int>q;
        for(int i=0;i<n;i++)
        {
            if(indegree[i]==0)
            {
                q.push(i);
            }
        }
        vector<int>topo;
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            topo.push_back(node);

            for(auto i:adj[node])
            {
                indegree[i]--;
                if(indegree[i]==0)q.push(i);
            }
        }
        if(topo.size()==n)return true;
        return false;
    }
};
